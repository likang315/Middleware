package com.demo;

public class Person implements Comparable<Person>{
	
	private String name;
	private int age;
	
	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	} 
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}


	public Person() {
		super();
		// TODO Auto-generated constructor stub
	}

	public Person(String name, int age) {
		super();
		this.name = name;
		this.age = age;
	}

	
	@Override
	public String toString() {
		return "Person [name=" + name + ", age=" + age + "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + age;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Person other = (Person) obj;
		if (age != other.age)
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		return true;
	}



	@Override
	public int compareTo(Person o) {
		if(this.age>o.age) 
			return 1;
		else if(this.age<o.age)
			return -1;
		else
		return 0;
	}


	
	
	
	
}









package com.demo;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

public class Test {

	public static  void main(String[] args) {
		
		Person p1=new Person("李康",9);
		Person p2=new Person("李慧",7);
		
//		List<Person> l=new ArrayList<Person>();
//		l.add(p1);
//		l.add(p2);
//		Collections.sort(l);//必须实现Comparable接口，重写compareTo
//		for(Person p:l) {
//			System.out.println(p);
//		}

		
		
//		Set<String>  s=new HashSet<String>();
//		s.add("likang");
//		s.add("李慧");
//		s.add("likang"); //因为Set为重复值
//		System.out.println(s.size());
		
		
		
//		Set<Person> p=new TreeSet<Person>();
//		p.add(p1);
//		p.add(p2);
//		p.add(new Person("ss",3));
//		Iterator <Person> i=p.iterator();
//		while(i.hasNext()) {
//			System.out.println(i.next());
//		}	
		
		
		
		
		
		
		
		
		
		
		
	}

	
}
