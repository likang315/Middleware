
springboot mvc Web 开发

1：启动MVC配置
	如果Spring Boot提供的Spring MVC不符合要求，则可以通过一个配置类（@Configuration）加上@EnableWebMvc注解.来实现
	完全控制的MVC配置

	@EnableWebMvc
	@Configuration
	public class WebMvcConfig extends WebMvcConfigurerAdapter{...}

2：Servlet
	
	@WebServlet(name = "myServlet", urlPatterns = "/myServlet") 
	public class MyServlet extends HttpServlet {}
	
	然后按照servlet的方法，services()

3：Filter(过滤器)

	声明过滤器并且在Application中使用@ServletComponentScan注解标注

	@WebFilter(filterName = "myFilter", urlPatterns = "/*")
	public class MyFilter implements Filter{}


4：Listener
	ServletContextListener：应用程序启动的时候会执行contextInitialized()方法

	@WebListener("MyListener") 
	public class MyListener implements ServletContextListener
	{ 
		private static Logger logger = LoggerFactory.getLogger(MyListener.class);

		@Override 
		public void contextInitialized(ServletContextEvent servletContextEvent) 
		{ logger.info("监听器启动"); } 
		@Override 
		public void contextDestroyed(ServletContextEvent servletContextEvent)
		{ logger.info("监听器销毁"); }

	}

	HttpSessionListener：会话监听窗口

	@WebListener("myHttpSessionListener")
	public class MyHttpSessionListener implements HttpSessionListener 
	{
 		@Override 
		public void sessionCreated(HttpSessionEvent se) 
		{
			 logger.debug("session创建"); 
		} 
		@Override 
		public void sessionDestroyed(HttpSessionEvent se) 
		{ 
			logger.debug("session销毁");
		}
	}

5：注册servlet，listener，filter	

	@Configuration 
	public class WebConfig
	{ 
		@Bean 
		public FilterRegistrationBean myFilter()
		{ 
			FilterRegistrationBean registrationBean = new FilterRegistrationBean(); 
			MyFilter filter = new MyFilter(); 
			registrationBean.setFilter(filter); 
			List<String> urlPatterns = new ArrayList<>();
			urlPatterns.add("/*"); 
			registrationBean.setUrlPatterns(urlPatterns); 
			registrationBean.setOrder(1); return registrationBean; 
		} 
	
		@Bean 
		public ServletRegistrationBean myServlet()
		{ 
			MyServlet demoServlet = new MyServlet(); 
			ServletRegistrationBean registrationBean = new ServletRegistrationBean(); 
			registrationBean.setServlet(demoServlet);
			List<String> urlMappings = new ArrayList<String>(); 
			urlMappings.add("/myServlet");////访问，可以添加多个
			registrationBean.setUrlMappings(urlMappings); 
			registrationBean.setLoadOnStartup(1); 
			return registrationBean; 
		} 
		
		@Bean 
		public ServletListenerRegistrationBean myListener() 
		{ 
			ServletListenerRegistrationBean registrationBean = new ServletListenerRegistrationBean<>(); 
			registrationBean.setListener(new MyListener()); 
			registrationBean.setOrder(1); 
			return registrationBean; 
		}
	}
	

6：tomcat 配置(org.springframework.boot.autoconfigure.web.ServerProperties)
	在application.properties中配置,会覆盖默认的配置
		server.port=端口
		server.session-timeout=30
		server-context-path=访问路径，默认为/servler
		tomcat.uri-encoding=配置tomcat编码，默认为UTF-8



7：Favicon (定制图标)
	spring.mvc.favicon.enabled=false  ,默认开启
	若要更改,则需将自己的favicon.ico（文件名不能改动）文件放置在classpath路径下










