package com.demo;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class Test1 {

	public static void main(String[] args) {
		//封装数据
		File file1=new File("F:/字符串/1.txt");
		File file2=new File("F:/字符串/123.txt");
		
		//选择字节流的操作
		FileInputStream fi=null;
		FileOutputStream fo=null;
		
		//
		try {
			//打开文件输入流，创建文件输出流
			fi=new FileInputStream(file1);
			fo=new FileOutputStream(file2);
			
			//进边读边写操作
			byte[] b=new byte[1024];
			int i =fi.read(b);
			while(i!=-1) {
				fo.write(b);
				i=fi.read(b);//读取到末尾没有数据时 ，返回-1
			}
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		//关闭流
		 try {  
	            if (fi != null) {  
	                fi.close();  
	            }  
	            if(fo!=null) {
	            	fo.close();
	            }
	        } catch (Exception e) {  
	            e.printStackTrace();  
	        }  
	}
		
}




	加缓冲的字节流，效率高
package com.demo;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

public class Test {

	public static  void main(String[] args) {
		
		File fileI = new File("F:\\1.txt");
		File fileO =new File("F:/1233.txt");
		
		//选择加字节流还是字符流
		FileInputStream fi=null;
		FileOutputStream fo=null;
		
		//选择是否加缓冲流
		BufferedInputStream bs=null;
		BufferedOutputStream bo=null;
		
		try {
			
		 fi=new FileInputStream(fileI);
		 fo=new FileOutputStream(fileO);
		
		 bs=new BufferedInputStream(fi);
		 bo=new BufferedOutputStream(fo);
		 
		 //读写
			byte[] b=new byte[1024];
			int i=bs.read(b);
			while(i!=-1) {
				bo.write(b);
				bo.flush(); //缓冲要加刷新
				i=bs.read(b);
			}
			
	 		 
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	
	}
}





  字符流----文本文件
package com.demo;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class Test3 {

	public static void main(String[] args) {
		//封装t数据
		File fileO=new File("F:/2.txt");
		File fileI=new File("F:/1.txt");
	
		//选择字符流，缓冲流
		FileReader fi=null;
		FileWriter fo=null;
		BufferedReader bi=null;
		BufferedWriter bo=null;
		
		try {
			fi=new FileReader(fileI);
			fo=new FileWriter(fileO,true);//追加功能，一般默认false
			bi=new BufferedReader(fi);
			bo=new BufferedWriter(fo);
			
			
			String i=bi.readLine();//读取的数据存在于String的返回值中
			while(i!=null) {
				
				bo.write(i);//从String中读取
				bo.newLine();//与上面FileWriter（）相对应
				bo.flush();
				i=bi.readLine();
				
			}
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	
		 //关闭io
				if(bi!=null){
					try {
						bi.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				if(bo!=null){
					try {
						bo.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				if(fi!=null){
					try {
						fi.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				if(fo!=null){
					try {
						fo.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
	

	}

}








字节流转换字符流，不可逆，效率较高


		InputStream in=System.in;
		Reader re=new InputStreamReader(in);  //转换流----处理流，用了关联
		//加缓冲流
		BufferedReader br=new BufferedReader(re);

		//BufferedReader in = new BufferedReader(new InputStreamReader(System.in));

		
		try {
			String st=br.readLine();
			System.out.println(st);
		} catch (IOException e) {
			e.printStackTrace();
		}











