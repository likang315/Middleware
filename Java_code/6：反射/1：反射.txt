package com.demo;

public class Cat {
	private String name;
	
	private String color;
	private double weight;
	
	public Cat(String name, String color, double weight) {
		super();
		this.name = name;
		this.color = color;
		this.weight = weight;
	}

	public Cat() {
		super();
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getColor() {
		return color;
	}

	public void setColor(String color) {
		this.color = color;
	}

	public double getWeight() {
		return weight;
	}

	public void setWeight(double weight) {
		this.weight = weight;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((color == null) ? 0 : color.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		long temp;
		temp = Double.doubleToLongBits(weight);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Cat other = (Cat) obj;
		if (color == null) {
			if (other.color != null)
				return false;
		} else if (!color.equals(other.color))
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		if (Double.doubleToLongBits(weight) != Double.doubleToLongBits(other.weight))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "Cat [name=" + name + ", color=" + color + ", weight=" + weight + "]";
	}
		
	
	
	
		
}











package com.demo;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class Test3 {

	public static  void main(String[] args) {
		
		Cat cat =new Cat("小花","奶白色",24.55);
		
		Class<Cat> className= Cat.class;//获得class对象
		Method[] md=className.getMethods();	
		
		for(Method i:md) {
				String name=i.getName();
				
				if(name.startsWith("setName")) {
					try {
						i.invoke(cat, "小猪");
					} 
					  catch (IllegalAccessException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (IllegalArgumentException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (InvocationTargetException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}	
				
				
					if(name.startsWith("setColor")) {
						try {
							i.invoke(cat, "黄色")	;
						} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					
					if(name.startsWith("setWeight")) {
						try {
							i.invoke(cat, "0.0");
						} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
					}
				
			}
		
		Method ms=null;
		try {
			
			ms = className.getMethod("getName");
			System.out.println(ms.invoke(cat));
			
			ms =className.getMethod("getColor");
			System.out.println(ms.invoke(cat));
			
			ms =className.getMethod("getWeight");
			System.out.println(ms.invoke(cat));
			
		} catch (NoSuchMethodException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (SecurityException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
			
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	
	}
			
}

