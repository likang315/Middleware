
springboot 集成 Mybatis
	
1：引入依赖

   <dependency>
   	<groupId>mysql</groupId>
    	<artifactId>mysql-connector-java</artifactId>
    	<scope>runtime</scope>
   </dependency>

   <dependency>
    	<groupId>org.mybatis.spring.boot</groupId>
    	<artifactId>mybatis-spring-boot-starter</artifactId>
   </dependency>

2：配置application.properties

## 数据源配置
spring.datasource.url=jdbc:mysql://localhost:3306/xupt?useUnicode=true&characterEncoding=utf8
spring.datasource.username=root
spring.datasource.password=mysql
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

## Mybatis 配置
mybatis.typeAliasesPackage=com.example.mybatis.entity
mybatis.mapperLocations=classpath:mapper/*.xml
mybatis.configuration.map-underscore-to-camel-case=true

# 打印mybatis中的sql语句
logging.level.com.example.mybatis.mapper=debug


3：扫描 Mapper 接口让容器管理
	@MapperScan: 配置dao层或者mapper层, 如果不在Application上配置注解也可以在每个mapper上标注@Mapper也可以，不建议

	@SpringBootApplication
	@MapperScan("com.example.mybatis.mapper")
	public class MybatisApplication {

	}


4：MyBatis自动生成器
	mvn mybatis-generator:generate  生成代码

5：MyBatis集成分页插件(pagehelper)
     1：导入依赖
	<dependency> 
		<groupId>com.github.pagehelper</groupId> 
		<artifactId>pagehelper-spring-boot-starter</artifactId> 
	</dependency>
     2：配置application.properties
		#pagehelper分页插件配置
		pagehelper.helperDialect=mysql
		pagehelper.reasonable=true
		pagehelper.supportMethodsArguments=true
		pagehelper.params=count=countSql
    
     3：在service中使用PageHelper.startPage(pageNo, pageSize);
		@Service
		@Transactional(readOnly = true)
		public class OrderServiceImpl implements OrderService 
		{

   			 @Autowired
    			private OrderMapper orderMapper;

    			// 注意方法的返回值为Page<T>
    			@Override
    			public Page<Order> getOrdersByPage(Integer pageNo, Integer pageSize) 
			{
        			PageHelper.startPage(pageNo, pageSize);
        			return orderMapper.getOrdersByPage();
			}
    			
		}





