
Git：分布式版本控制系统，控制代码版本，可回退，提交，合并

工作区（workspace）：修改的区域
暂存区（stage)：暂时存放增加的文件
版本库(repository)：仓库(目录)里面的所有文件被Git管理,每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，
		    或者在将来某个时刻可以"还原"
 .git：版本库
 .gitignore ：忽略提交的文件，只要把文件名放进去，如果不想提交可以按文件名注释

使用Git时，你的个人信息会保存在config文件中
配置个人信息时有两个级别、
	1：--system:会把配置信息写到最高级别的配置文件中(Git安装目录/etc/config)，系统上每个用户和仓库都会用这个配置文件
	2：--global:会把配置信息写到只针对当前用户的配置文件中(c:/User/用户名/.gitconfig)

添加自己的信息
git config --global user.email "you@example.com"
git config --global user.name "Your Name"

先自己新建一个文件夹作为版本库（支持linux命令）

1：git init  
	初始化一个仓库,会增加 .git 的目录(默认隐藏)，这个目录是Git来跟踪管理版本库的
2：vim readme.txt
	打开文本编辑器，建立文件 :wq 保存退出
3：git add . 
	将文件添加到暂存区（stage）
4：git commit -m "本次提交的说明" 
	将暂存区中的文件提交当前分支，生成版本号(快照)
5：git status 
	查看仓库的状态
6：git diff 文件名
	git diff 比较暂存区和工作区的区别
	--- a/readme.txt
	+++ b/readme.txt
	@@ -3,7 +3,7 @@

	---表示变化前的版本
	+++表示变化后的版本
	"-3,7"：减号表示变化前的文件，从第三行（包括）开始，连续7行

	git diff -- stat  ：查看哪些文件，有多少行产生了改动.+:增加的行数,-减少的行数，总共多少行修改
7：git log
	查看日志,版本号，十六进制表示



在Git中HEAD 比表示当前版本，上一个版本是HEAD^,上上版本是HEAD^^,在往上HEAD~1

8：git reset --hard 版本号或者HEAD^
	回退到指定(上一个)的版本，版本号没必要写完全，自动检索
9：git ref log
	记录每一次的命令，得到版本号,可以回退到未来的那个版本



 工作区：自己创建的文件夹，里面有一个 .git 文件夹
 .git：就是版本库，里面有个暂存区（stage),以及git为我们创建的master 主分支
 git commit -m "XXX" 提交之后暂存区就清空了

10：git checkout -- 文件名	
	可以把文件在工作区的修改全部撤销
11：git reset HEAD <文件名>
	可以把暂存区的修改撤销掉（unstage），重新放回工作区
12：rm 文件名
	把文件管理器的文件删除了，但是版本库中还有
    git rm 文件名 ，并且 git commit -m "XXX"
	确实删除了版本库中的文件



远程仓库GitHub：本地Git仓库和GitHub仓库之间的传输是通过SSH加密的,支持Https 和 SSH协议

13：ssh-keygen -t rsa -C "likang315@163com"
	在本地生成公钥私钥,然后把公钥添加到Github 或者Gitlab
14：git remote add origin https://github.com/likang315/Demo.git
	要关联一个远程库
    	git remote rm origin
	删除远程库
15：git push origin 本地分支：远程分支
	推送代码到远端对应的分支上
16：git push origin 本地分支
	远端自动创建于本地分支同名分支
17：git push origin --delete 远程分支名
	删除远程分支名，本地分支没有影响
18：git checkout -b 本地分支名 origin/远程分支名
	创建本地分支，把远程指定分支拉到此分支上
19：git pull origin 远端分支
	拉取远端的代码到本地
20：git branch -vv
	查看本地分支对应的远端分支
21：git clone	git@github.com:likang315/Demo.git
	克隆仓库



master主分支
在合并分支时，如果当前分支和需要合并的分支都做了提交则，会产生冲突，git status 查看状态，找出冲突文件修改后在提交

18：git branch 分支名
	新建一个分支，并不跳转到新分支上
19：git checkout 分支名 
	切换到指定分支 
    git checkout -b 分支名 
	新建一个分支，并跳转到新的分支上	
20：git branch
	查看所有分支，当前分支前有 *
21：git merge 分支名
	合并指定分支到当前分支
22：git branch -d 分支名
	删除分支


分支策略
	合并分支时，请注意--no-ff参数，表示禁用Fast forward(快速合并)，本次合并会创建一个新的commit，所以加上-m参数，
	把commit描述写进去
23：git merge --no-ff -m "XXX" 分支名
24：git checkout -b branch-name origin/branch-name
	clone后，本地只能看见master分支，因此在本地创建和远程分支对应的分支branch-name（分支名）

25：git branch --set-upstream branch-name origin/branch-name
	关联本地分支和远程分支
26：git pull
	拉取最新的远程提交，合并之后再提交，此时要解决冲突

27：git diff 命令后都可以加文件名指定具体文件路径
	git diff  
	默认比较的是工作区和暂存区
	git diff --cached
	比较暂存区和最新本地版本库的区别



